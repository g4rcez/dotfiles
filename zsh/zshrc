export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="vandalvnl"
HYPHEN_INSENSITIVE="true"
export UPDATE_ZSH_DAYS=7
ENABLE_CORRECTION="true"
HIST_STAMPS="yyyy-mm-dd"
plugins=(
  git
  zsh-syntax-highlighting
  zsh-autosuggestions
  zsh-256color
)
source $ZSH/oh-my-zsh.sh
export MANPATH="/usr/local/man:$MANPATH"
export ARCHFLAGS="-arch x86_64"
export SSH_KEY_PATH="~/.ssh/rsa_id"

########## CLI Utils ##########

setopt append_history
setopt auto_pushd
setopt autocd
setopt extended_glob
setopt extended_history
setopt hist_expire_dups_first
setopt hist_find_no_dups
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_save_no_dups
setopt pushd_ignore_dups
setopt pushd_minus
setopt share_history
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
ZSH_HIGHLIGHT_PATTERNS+=("rm -rf *" "fg=red")
ZSH_HIGHLIGHT_PATTERNS+=("mv *" "fg=yellow")
ZSH_HIGHLIGHT_STYLES[alias]="fg=yellow,bold"
ZSH_HIGHLIGHT_STYLES[builtin]="fg=yellow,bold"
ZSH_HIGHLIGHT_STYLES[function]="fg=blue,bold"
ZSH_HIGHLIGHT_STYLES[command]="fg=blue,bold"
ZSH_HIGHLIGHT_STYLES[precommand]="fg=green,bold"
ZSH_HIGHLIGHT_STYLES[hashed-command]="fg=green,bold"
ZSH_HIGHLIGHT_STYLES[commandseparator]="fg=yellow"
ZSH_HIGHLIGHT_STYLES[redirection]="fg=yellow,bold"
ZSH_HIGHLIGHT_STYLES[bracket-level-1]="fg=cyan"
ZSH_HIGHLIGHT_STYLES[bracket-level-2]="fg=green"
ZSH_HIGHLIGHT_STYLES[bracket-level-3]="fg=magenta"
ZSH_HIGHLIGHT_STYLES[bracket-level-4]="fg=yellow"
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
ZSH_HIGHLIGHT_STYLES[default]=none
ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=009
ZSH_HIGHLIGHT_STYLES[hashed-command]=fg=009
ZSH_HIGHLIGHT_STYLES[path]="fg=blue,underline"
ZSH_HIGHLIGHT_STYLES[path_pathseparator]="fg=blue,underline"
ZSH_HIGHLIGHT_STYLES[globbing]=fg=063
ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=white,underline
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=063
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=063
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=009
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009

########### ALIAS #############

alias apt='sudo apt'
alias pacman='sudo pacman'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias hello='sudo systemctl start '
alias pbcopy='xclip -sel clip'
alias pbpaste='xclip -selection clipboard -o'
alias restart='sudo systemctl restart '
alias start='sudo systemctl start '
alias status='sudo systemctl status '
alias stop="sudo systemctl stop "
alias zshrc='code ~/.zshrc'
alias free='free -htmlw'

mp3(){
  tmp=$PWD
  cd ~/Music
  youtube-dl --extract-audio --audio-format mp3 "$1"
  cd $tmp
}

transfer() {
  if [ $# -eq 0 ]; then
    echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md";
    return 1;
  fi
  tmpfile=$( mktemp -t transferXXX );
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile;
  else
    curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ;
  fi;
  cat $tmpfile;
  rm -f $tmpfile;
}
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
     echo "'$1' is not a valid file to extract"
  fi
}
sysinfo(){
    ps -A --sort -rsz -o pid,comm,pmem,pcpu | awk "NR<=$@"
}
words(){
  egrep -o '\w+' | sort -f | uniq -ci | sort -nr | head $1
}
clone(){
    git clone "${1:?"usage: clone <url_to_clone>"}"
    cd ${${1%%.git}##*/}
}
clones(){
  for repo in $@; do
    git clone "$repo"
  done
}
pwdc(){
  emulate -L zsh
  echo "$(pwd)" | pbcopy
}
killme(){
  curdir="$(pwd)"
  cd .. && rm -rf "$curdir"
  ls
}
filec(){
  emulate -L zsh
  clipcopy "$1"
}
############ Dev Tools ############
# NVM - Node
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
export PATH="$HOME/.rbenv/bin:$PATH"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
