""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map IDE actions to IdeaVim -- https://jb.gg/abva4t -- https://jb.gg/share-ideavimrc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ██╗██████╗ ███████╗ █████╗ ██╗   ██╗██╗███╗   ███╗
" ██║██╔══██╗██╔════╝██╔══██╗██║   ██║██║████╗ ████║
" ██║██║  ██║█████╗  ███████║██║   ██║██║██╔████╔██║
" ██║██║  ██║██╔══╝  ██╔══██║╚██╗ ██╔╝██║██║╚██╔╝██║
" ██║██████╔╝███████╗██║  ██║ ╚████╔╝ ██║██║ ╚═╝ ██║
" ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚═╝╚═╝     ╚═╝
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" vim scripts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last', 'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last', 'function', 'const']
  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w
  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" vim config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader=" "
set autoindent
set autoread
set cmdheight=0
set conceallevel=1
set copyindent
set cursorcolumn
set cursorline
set encoding=utf-8
set expandtab
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set magic
set matchpairs
set mouse=a
set nocompatible
set nrformats
set number relativenumber
set numberwidth=2
set ruler=true
set shiftwidth=2
set showcmd
set showmode=false
set showmode=true
set si
set signcolumn=yes
set smartcase
set smartindent
set smarttab
set so=5
set spell
set tabstop=2
set title
set ttyfast
set undodir=~/.ideavim_tmp/undodir
set undofile
set updatetime=100
set viminfo
set visualbell
set ideavimsupport=+singleline,dialog
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" idea things
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
sethandler n:vim i:vim
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='l'
nnoremap <C-t> :NERDTreeFocus<CR>
set clipboard=unnamedplus,unnamed,ideaput
set ideaput
set ideajoin
set ideamarks
set idearefactormode=keep
set ideastrictmode
set NERDTree
set commentary
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" WhichKey
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:WhichKeyDesc_leader = "<leader> Leader key"
let g:WhichKey_CommandColor = "#987DD2"
let g:WhichKey_FontSize = 14
let g:WhichKey_PrefixColor = "#8AA9F9"
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_DefaultDelay = 400
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_SortCaseSensitive = "false"
set notimeout
set timeoutlen=5000
set which-key
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" surround - argtextobj - matchit
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:argtextobj_pairs="(:),{:},<:>"
set surround
set argtextobj
set textobj-entire
set textobj-indent
set matchit
set vim-paragraph-motion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" yanks
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:highlightedyank_highlight_color = "rgba(216,174,234,40)"
set highlightedyank
vmap <leader>y <action>(EditorCopy)
nmap <leader>y <action>(EditorCopy)
vmap <leader>p <action>(EditorPaste)
nmap <leader>p <action>(EditorPaste)

"" don't yank buffer
noremap ' "-
noremap <bs> "-
noremap X "_x
nnoremap yy "+yy
vnoremap y "+y
nnoremap p "+p
vnoremap p "+p
nnoremap P "+P
noremap P "+P
vmap <leader>d "+d
nmap <leader>P "+P
vmap <leader>P "+P

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" life quality / operations
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap gu <action>(ShowUsages)
nmap gU <action>(FindUsages)
nmap [[ <action>(MethodUp)
nmap ]] <action>(MethodDown)
vnoremap / :action Find<CR>
nnoremap / :action Find<CR>
map U <C-R>
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

"" Invert with vim scripts
nnoremap ! :call Invert(0)<CR>
vnoremap ! :<C-u>call Invert(1)<CR>

"" Numbers
nnoremap - <C-x>
let g:WhichKeyDesc_decrease = "- Decrease number"

nnoremap + <C-a>
let g:WhichKeyDesc_increase = "+ Increase number"

vnoremap <leader>ds :'<,'>g/^$/d<CR>
let g:WhichKeyDesc_removeEmptyLines = "<leader>ds Remove empty lines from selection"

nmap <leader>/ <action>(ShowErrorDescription)
let g:WhichKeyDesc_show_error_description = "<leader>/ Show error description"

nnoremap vv V
let g:WhichKeyDesc_select_all_line = "vv Select entire line (V)"

nnoremap J mzJ`z
let g:WhichKeyDesc_join_line = "J Join with bellow line"
map gh 0
map 0 ^
map Q gq
map U <C-R>
map gl $
vnoremap < <gv
vnoremap > >gv
nmap < <<
nmap > >>
nmap # #zz
nmap * *zz
nmap ; :

imap <C-a> <action>(EditorLineStart)
imap <C-e> <action>(EditorLineEnd)
imap <C-z> <action>($Undo)

map go <Action>(Switcher)
let g:WhichKeyDesc_switcher = "go Switcher"

map gp <Action>(FileStructurePopup)
let g:WhichKeyDesc_file_structure = "gp File structure popup"

nmap <leader>k <Action>(ShowHoverInfo)
let g:WhichKeyDesc_Show_Hover_info = "<leader>k Show hover info"

nmap ; :
nmap <leader>1 <Action>(SelectInProjectView)
let g:WhichKeyDesc_show_this = "<leader>1 Show current file in NERDTree"
nmap <leader>P <action>(RecentProjectListGroup)

let g:WhichKeyDesc_recent_projects = "<leader>P Open recent projects"

nmap [d <action>(GotoPreviousError)
let g:WhichKeyDesc_goto_prev_error = "[d Goto prev error"

nmap ]d <action>(GotoNextError)
nmap <leader>x <action>(GotoNextError)
let g:WhichKeyDesc_goto_next_error = "]d Goto next error"
let g:WhichKeyDesc_goto_next_error = "<leader>x Goto next error"

nmap <leader>git <action>(Git.Menu)
let g:WhichKeyDesc_git_menu = "<leader>git Open git menu"

nmap <leader>q <action>(CloseEditor)
let g:WhichKeyDesc_close_editor = "<leader>q Close editor"

nmap <leader>u <action>(Back)
let g:WhichKeyDesc_back = "<leader>u Back"

nmap <leader>zen <action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_zen_mode = "<leader>zen Zen mode"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" jetbrains actions - prefix j(jetbrains)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:WhichKeyDesc_jetbrains_prefix = "<leader>j +Jetbrains"

nmap <leader>ja <action>(ShowIntentionActions)
let g:WhichKeyDesc_show_intentions = "<leader>ja ShowIntentionActions"

nmap <leader>jr <action>(Run)
let g:WhichKeyDesc_run = "<leader>jr Run current file"

nmap <leader>jc <action>(RunClass)
let g:WhichKeyDesc_run_class = "<leader>jc Run current entity"

nmap <leader>js <action>(EditorToggleUseSoftWraps)
let g:WhichKeyDesc_wrap_lines = "<leader>js Soft wrap"

map <leader>je <action>(SurroundWithLiveTemplate)
let g:WhichKeyDesc_surround = "<leader>je Surround with emmet"

map <leader>jm <action>(StringManipulation.Group.Main)
let g:WhichKeyDesc_manipulate_string = "<leader>jm Manipulate string plugin"

nmap <leader>jt <action>(Markdown.GenerateTableOfContents)
let g:WhichKeyDesc_generate_table_of_content = "<leader>jt Generate Table of Contents(Markdown)"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" folding - prefix z(???)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:WhichKeyDesc_jetbrains_prefix = "<leader>z +Folding"
nnoremap zx :action ExpandCollapseToggleAction<CR>
let g:WhichKeyDesc_collapse_toggle_regionZX = "zx Collapse toggle region"

nnoremap zo :action ExpandCollapseToggleAction<CR>
let g:WhichKeyDesc_collapse_toggle_regionZO = "zx Collapse toggle region"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" refactor tools
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap gi <action>(FileStructurePopup)
let g:WhichKeyDesc_file_structure_popup = "gi File Structure Popup"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" debug - prefix d(debug)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>db <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_Breakpoint = "<leader>db Toggle Line Breakpoint"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" code tools - prefix c(code)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:WhichKeyDesc_code_tools_prefix = "<leader>c +Code"
nmap <leader><leader> <action>(SearchEverywhere)
let g:WhichKeyDesc_reformat_code_leader = "<leader><leader> SearchEverywhere"

nmap <leader>ca <action>(CodeEditorViewGroup)
let g:WhichKeyDesc_reformat_code = "<leader>ca CodeEditorViewGroup"

nmap <leader>cf <action>(ReformatCode)
let g:WhichKeyDesc_reformat_code = "<leader>cf Reformat Code"

nmap <leader>co <action>(OptimizeImports)
let g:WhichKeyDesc_optimize_imports = "<leader>co Optimize Imports"

nmap <leader>cr <action>(RenameElement)
let g:WhichKeyDesc_rename_element = "<leader>cr Rename Element"

""" asc sort
vnoremap <leader>cs :'<,'>sort<cr>
let g:WhichKeyDesc_sort_asc = "<leader>cs Sort Asc"
""" desc sort
vnoremap <leader>cr :'<,'>!tail -r<cr>
let g:WhichKeyDesc_sort_reverse = "<leader>cr Sort Desc"

""" find usage
map gr <Action>(FindUsages)
let g:WhichKeyDesc_find_usages = "<leader>gr Find usages"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" file/find tools - prefix file(file/find)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>fr <action>(RenameFile)
let g:WhichKeyDesc_rename_file = "<leader>fr File rename"

nmap <leader>fR <action>(RecentFiles)
let g:WhichKeyDesc_recent_files = "<leader>fR Open recent files"

nmap <leader>fn <action>(NewFile)
let g:WhichKeyDesc_rename_file = "<leader>fn New file"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" search tools - telescope like - prefix s(search)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:WhichKeyDesc_search_tools_prefix = "<leader>s +Search"
nmap <leader>sp <action>(FindInPath)

let g:WhichKeyDesc_find_in_path = "<leader>sp Find in path"
nmap <leader>sf <action>(GotoFile)
let g:WhichKeyDesc_goto_file = "<leader>sf Goto file"

nmap <leader>sa <action>(TextSearchAction)
let g:WhichKeyDesc_text_search_action = "<leader>sa Text search action"

nmap <leader>sr <action>(ReplaceInPath)
let g:WhichKeyDesc_replace_in_path = "<leader>sr Replace in path"

nmap <leader>ss <action>(GotoSymbol)
let g:WhichKeyDesc_goto_symbol = "<leader>ss Goto symbol"

nmap <leader>sc <action>(GotoClass)
let g:WhichKeyDesc_goto_symbol = "<leader>sc Search Class"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" movement tools - prefix m(move)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <A-up> <action>(MoveLineUp)
let g:WhichKeyDesc_move_line_up = "<A-up> Move line up"

map <A-down> <action>(MoveLineDown)
let g:WhichKeyDesc_move_line_down = "<A-down> Move line down"

set easymotion
let g:EasyMotion_do_mapping = 1

nmap <leader>mj <action>(AceDeclarationAction)
let g:WhichKeyDesc_ace_jump = "<leader>mj Easy motion plugin"

set multiple-cursors
vnoremap <C-j> <Action>(EditorCloneCaretBelow)
vnoremap <C-k> <Action>(EditorCloneCaretAbove)
nmap <C-n> <plug>NextWholeOccurrence
nmap <C-n> <plug>NextWholeOccurrence
nmap g<C-n> <plug>NextOccurrence
xmap <C-n> <plug>NextWholeOccurrence
xmap <C-p> <plug>RemoveOccurrence
xmap <C-x> <plug>SkipOccurrence
xmap g<C-n> <plug>NextOccurrence

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" errors - prefix [
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap ]n :action GotoNextError<cr>
nnoremap ]p :action GotoPreviousError<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" handlers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
sethandler <C-p> n-v:vim i:ide

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" bookmark|buffer|tabs - prefix (t|b)(bookmark|buffer)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:WhichKeyDesc_bookmark_prefix = "<leader>m +Bookmark"
nmap <leader>ba <Action>(ToggleBookmark)
nmap <leader>bm <Action>(ToggleBookmark)
nmap <leader>br <Action>(ToggleBookmark)
nmap <leader>mm <Action>(ToggleBookmark)
let g:WhichKeyDesc_toggle_bookmarks_leader = "<leader>ma Toggle bookmark"

nmap <Tab><Tab> <Action>(ShowBookmarks)
nmap <leader>bs <Action>(ShowBookmarks)
let g:WhichKeyDesc_toggle_bookmarks_leader = "<tab><tab> Show bookmarks"
let g:WhichKeyDesc_toggle_bookmarks_leader = "<leader>bs Show bookmarks"

nmap <leader>bp <Action>(GotoPreviousBookmark)
let g:WhichKeyDesc_bookmarks = "<leader>bp Goto previous bookmark"

nmap <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks = "<leader>bn Goto next bookmark"

nmap <C-l> <action>(NextTab)
nmap <leader>l <action>(NextTab)
let g:WhichKeyDesc_next_tab_leader = "<leader>l Next tab"

nmap <C-h> <action>(PreviousTab)
nmap <leader>h <action>(PreviousTab)
let g:WhichKeyDesc_previous_tab_leader = "<leader>h Previous tab"

nmap <leader>bl <Action>(NextSplitter)
let g:WhichKeyDesc_next_splitter = "<leader>bl next splitter"

nmap <leader>bh <Action>(PrevSplitter)
let g:WhichKeyDesc_previous_splitter = "<leader>bh prev splitter"

nmap <leader>tt :tabo<CR>
let g:WhichKeyDesc_tabo = "<leader>tt Close all except current"
nmap <leader>bo :tabo<CR>
let g:WhichKeyDesc_tabo = "<leader>tt Close all except current"

nmap <leader>tr <action>(ReopenClosedTab)
let g:WhichKeyDesc_reopen_tab = "<leader>tr Reopen closed tab"

"" Split
nmap <leader>\ <action>(SplitVertically)
let g:WhichKeyDesc_split_vertically = "<leader>\ Split horizontally"

nmap <leader>- <action>(SplitHorizontally)
let g:WhichKeyDesc_split_horizontally = "<leader>- Split vertically"

"" Save in normal mode
nmap <C-s> :w<CR>
